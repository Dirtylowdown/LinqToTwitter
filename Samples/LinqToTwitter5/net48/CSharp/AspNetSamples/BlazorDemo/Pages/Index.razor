@page "/"
@implements IDisposable
@using LinqToTwitter
@using BlazorDemo.Models
@inject BlazorDemo.Services.BlazorAuthorizer BlazorAuthorizer

<TwitterApplicationAuth />

@if (BlazorAuthorizer.CredentialStore != null)
{
    <h4>Tweets for @BlazorAuthorizer.CredentialStore.ScreenName</h4>

    <button class="btn btn-primary" @onclick="GetTweets">Get Tweets</button>
    <br /><br />
    @foreach (var tweet in tweets)
    {
        <dl>
            <dt><img src="@tweet.ImageUrl" />@@<b>@tweet.ScreenName</b></dt>
            <dd>@tweet.Text</dd>
        </dl>
    }
}

@code {
    public List<TweetViewModel> tweets = new List<TweetViewModel>();

    // This method is called when the control is initialized
    protected override void OnInitialized()
    {
        // Subscribe to the StateChanged EventHandler
        BlazorAuthorizer.StateChanged += OnBlazorAuthorizerStateChanged;
    }

    // This method is fired when the BlazorAuthorizer object
    // invokes its StateHasChanged() method
    // This will cause this control to invoke its own
    // StateHasChanged() method
    void OnBlazorAuthorizerStateChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        // When this control is disposed of
        // unsubscribe from the StateChanged EventHandler
        BlazorAuthorizer.StateChanged -= OnBlazorAuthorizerStateChanged;
    }

    async Task GetTweets()
    {
        var ctx = new TwitterContext(BlazorAuthorizer);

        tweets = await (from tweet in ctx.Status
                        where tweet.Type == StatusType.Home &&
                              tweet.TweetMode == TweetMode.Extended
                        select new TweetViewModel
                        {
                            ImageUrl = tweet.User.ProfileImageUrl,
                            ScreenName = tweet.User.ScreenNameResponse,
                            Text = tweet.FullText
                        })
            .ToListAsync();
    }
}