@page "/"
@implements IDisposable
@using LinqToTwitter
@using BlazorDemo.Models
@inject BlazorDemo.Services.BlazorAuthorizer BlazorAuthorizer

<TwitterApplicationAuth />

@if (BlazorAuthorizer.CredentialStore != null)
{
    <p>Twitter ScreenName = @BlazorAuthorizer.CredentialStore.ScreenName</p>

    <button class="btn btn-primary" @onclick="GetTweets">Get Tweets</button>

    <table class="table">
        <thead>
            <tr>
                <th>ImageUrl</th>
                <th>ScreenName</th>
                <th>Text</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tweet in tweets)
            {
                <tr>
                    <td>@tweet.ImageUrl</td>
                    <td>@tweet.ScreenName</td>
                    <td>@tweet.Text</td>
                    <td>
                        @*<button class="btn btn-primary"
                                @onclick="(() => EditForecast(forecast))">
                            Edit
                        </button>*@
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    public List<TweetViewModel> tweets = new List<TweetViewModel>();

    // This method is called when the control is initialized
    protected override void OnInitialized()
    {
        // Subscribe to the StateChanged EventHandler
        BlazorAuthorizer.StateChanged += OnBlazorAuthorizerStateChanged;
    }

    // This method is fired when the BlazorAuthorizer object
    // invokes its StateHasChanged() method
    // This will cause this control to invoke its own
    // StateHasChanged() method
    void OnBlazorAuthorizerStateChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        // When this control is disposed of
        // unsubscribe from the StateChanged EventHandler
        BlazorAuthorizer.StateChanged -= OnBlazorAuthorizerStateChanged;
    }

    async Task GetTweets()
    {
        var ctx = new TwitterContext(BlazorAuthorizer);

        tweets = await (from tweet in ctx.Status
             where tweet.Type == StatusType.Home &&
                   tweet.TweetMode == TweetMode.Extended
             select new TweetViewModel
             {
                 ImageUrl = tweet.User.ProfileImageUrl,
                 ScreenName = tweet.User.ScreenNameResponse,
                 Text = tweet.FullText
             })
            .ToListAsync();
    }
}