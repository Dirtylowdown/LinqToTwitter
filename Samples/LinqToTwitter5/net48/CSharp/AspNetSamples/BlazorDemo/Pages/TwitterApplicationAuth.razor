@using System.Net.Http
@using Microsoft.AspNetCore.Mvc
@using BlazorDemo.Classes
@using LinqToTwitter
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject BlazorDemo.Services.BlazorAuthorizer BlazorAuthorizer
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@if (!Authenticated)
{
    <button class="btn btn-primary" @onclick="CallAuth">Begin the Authorization Process</button>
}
else
{
    <p>Twitter ScreenName = @BlazorAuthorizer.CredentialStore.ScreenName</p>
    <p>Twitter UserID = @BlazorAuthorizer.CredentialStore.UserID</p>
}

@code {
    bool Authenticated = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string oauth_token = "";
            NavigationManager.TryGetQueryString<string>("oauth_token", out oauth_token);

            string oauth_verifier = "";
            NavigationManager.TryGetQueryString<string>("oauth_verifier", out oauth_verifier);

            if (oauth_token != null)
            {
                // Get the CredentialStore that was stored when the CallAuth() method was called
                var CredentialStore = await sessionStorage.GetItemAsync<InMemoryCredentialStore>("CredentialStore");

                // Set it because the contents were lost when the user was directed
                // to Twitter to authorize this application
                BlazorAuthorizer.CredentialStore = CredentialStore;

                var responseUrl = $@"{BlazorAuthorizer.GetPathBase()}?oauth_token={oauth_token}&oauth_verifier={oauth_verifier}";

                await BlazorAuthorizer.CompleteAuthorizeAsync(new Uri(responseUrl));

                // This is how you access credentials after authorization.
                // The oauthToken and oauthTokenSecret do not expire.
                // You can use the userID to associate the credentials with the user.
                // You can save credentials any way you want - database, 
                //   isolated storage, etc. - it's up to you.
                // You can retrieve and load all 4 credentials on subsequent 
                //   queries to avoid the need to re-authorize.
                // When you've loaded all 4 credentials, LINQ to Twitter will let 
                //   you make queries without re-authorizing.
                //
                //var credentials = BlazorAuthorizer.CredentialStore;
                //string oauthToken = credentials.OAuthToken;
                //string oauthTokenSecret = credentials.OAuthTokenSecret;
                //string screenName = credentials.ScreenName;
                //ulong userID = credentials.UserID;

                // Save the updated CredentialStore
                await sessionStorage.SetItemAsync("CredentialStore", BlazorAuthorizer.CredentialStore);

                Authenticated = true;
                StateHasChanged();
            }
        }
    }

    async Task CallAuth()
    {
        RedirectResult result = (RedirectResult)await BlazorAuthorizer.Begin();

        // Save Session 
        // CredentialStore was populated by calling BlazorAuthorizer.Begin() 
        await sessionStorage.SetItemAsync("CredentialStore", BlazorAuthorizer.CredentialStore);

        // Navigate to Twitter to authorize thsi application
        NavigationManager.NavigateTo(result.Url, false);
    }
}
